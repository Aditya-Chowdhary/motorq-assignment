// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: organisations.sql

package database

import (
	"context"
)

const createOrganisation = `-- name: CreateOrganisation :one
INSERT INTO organisations (name, account, website, fuel_policy, speed_policy, parent_id)
Values ($1, $2, $3, $4, $5, $6)
RETURNING org_id, name, account, website, fuel_policy, fuel_set_by, speed_policy, speed_set_by, parent_id
`

type CreateOrganisationParams struct {
	Name        string `json:"name"`
	Account     string `json:"account"`
	Website     string `json:"website"`
	FuelPolicy  int32  `json:"fuel_policy"`
	SpeedPolicy int32  `json:"speed_policy"`
	ParentID    *int64 `json:"parent_id"`
}

func (q *Queries) CreateOrganisation(ctx context.Context, arg CreateOrganisationParams) (Organisation, error) {
	row := q.db.QueryRow(ctx, createOrganisation,
		arg.Name,
		arg.Account,
		arg.Website,
		arg.FuelPolicy,
		arg.SpeedPolicy,
		arg.ParentID,
	)
	var i Organisation
	err := row.Scan(
		&i.OrgID,
		&i.Name,
		&i.Account,
		&i.Website,
		&i.FuelPolicy,
		&i.FuelSetBy,
		&i.SpeedPolicy,
		&i.SpeedSetBy,
		&i.ParentID,
	)
	return i, err
}

const createOrganisationThroughParent = `-- name: CreateOrganisationThroughParent :one
INSERT INTO organisations (name, account, website, fuel_policy, fuel_set_by, speed_policy, parent_id)
Values ($1, $2, $3, $4, $5, $6, $5)
RETURNING org_id, name, account, website, fuel_policy, fuel_set_by, speed_policy, speed_set_by, parent_id
`

type CreateOrganisationThroughParentParams struct {
	Name        string `json:"name"`
	Account     string `json:"account"`
	Website     string `json:"website"`
	FuelPolicy  int32  `json:"fuel_policy"`
	ParentID    int64  `json:"parent_id"`
	SpeedPolicy int32  `json:"speed_policy"`
}

func (q *Queries) CreateOrganisationThroughParent(ctx context.Context, arg CreateOrganisationThroughParentParams) (Organisation, error) {
	row := q.db.QueryRow(ctx, createOrganisationThroughParent,
		arg.Name,
		arg.Account,
		arg.Website,
		arg.FuelPolicy,
		arg.ParentID,
		arg.SpeedPolicy,
	)
	var i Organisation
	err := row.Scan(
		&i.OrgID,
		&i.Name,
		&i.Account,
		&i.Website,
		&i.FuelPolicy,
		&i.FuelSetBy,
		&i.SpeedPolicy,
		&i.SpeedSetBy,
		&i.ParentID,
	)
	return i, err
}

const getAllOrganisations = `-- name: GetAllOrganisations :many
SELECT org_id, name, account, website, fuel_policy, fuel_set_by, speed_policy, speed_set_by, parent_id
FROM organisations
`

func (q *Queries) GetAllOrganisations(ctx context.Context) ([]Organisation, error) {
	rows, err := q.db.Query(ctx, getAllOrganisations)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Organisation
	for rows.Next() {
		var i Organisation
		if err := rows.Scan(
			&i.OrgID,
			&i.Name,
			&i.Account,
			&i.Website,
			&i.FuelPolicy,
			&i.FuelSetBy,
			&i.SpeedPolicy,
			&i.SpeedSetBy,
			&i.ParentID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllOrganisationsWithSetBy = `-- name: GetAllOrganisationsWithSetBy :many
select o.org_id, o."name", o.account, o.website, o.fuel_policy, o1."name" as fuel_set_by, o.speed_policy, o2."name" as speed_set_by, o.parent_id from organisations o
inner join organisations o1 on o.fuel_set_by = o1.org_id 
inner join organisations o2 on o.speed_set_by = o2.org_id
`

type GetAllOrganisationsWithSetByRow struct {
	OrgID       int64  `json:"org_id"`
	Name        string `json:"name"`
	Account     string `json:"account"`
	Website     string `json:"website"`
	FuelPolicy  int32  `json:"fuel_policy"`
	FuelSetBy   string `json:"fuel_set_by"`
	SpeedPolicy int32  `json:"speed_policy"`
	SpeedSetBy  string `json:"speed_set_by"`
	ParentID    *int64 `json:"parent_id"`
}

func (q *Queries) GetAllOrganisationsWithSetBy(ctx context.Context) ([]GetAllOrganisationsWithSetByRow, error) {
	rows, err := q.db.Query(ctx, getAllOrganisationsWithSetBy)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllOrganisationsWithSetByRow
	for rows.Next() {
		var i GetAllOrganisationsWithSetByRow
		if err := rows.Scan(
			&i.OrgID,
			&i.Name,
			&i.Account,
			&i.Website,
			&i.FuelPolicy,
			&i.FuelSetBy,
			&i.SpeedPolicy,
			&i.SpeedSetBy,
			&i.ParentID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOrganisation = `-- name: GetOrganisation :one
SELECT org_id, name, account, website, fuel_policy, fuel_set_by, speed_policy, speed_set_by, parent_id
FROM organisations
WHERE org_id = $1
`

func (q *Queries) GetOrganisation(ctx context.Context, orgID int64) (Organisation, error) {
	row := q.db.QueryRow(ctx, getOrganisation, orgID)
	var i Organisation
	err := row.Scan(
		&i.OrgID,
		&i.Name,
		&i.Account,
		&i.Website,
		&i.FuelPolicy,
		&i.FuelSetBy,
		&i.SpeedPolicy,
		&i.SpeedSetBy,
		&i.ParentID,
	)
	return i, err
}

const getOrganisationWithChild = `-- name: GetOrganisationWithChild :many
with recursive query_test
as (
	select org_id, "name", account, website, fuel_policy, fuel_set_by, speed_policy, speed_set_by, parent_id
	from organisations o
	where o.org_id = $1
	union all 	
	select o.org_id, o."name", o.account, o.website, o.fuel_policy, o.fuel_set_by, o.speed_policy, o.speed_set_by, o.parent_id 
	from organisations o 
	join query_test q on o.parent_id = q.org_id)
select org_id, name, account, website, fuel_policy, fuel_set_by, speed_policy, speed_set_by, parent_id from query_test
`

type GetOrganisationWithChildRow struct {
	OrgID       int64  `json:"org_id"`
	Name        string `json:"name"`
	Account     string `json:"account"`
	Website     string `json:"website"`
	FuelPolicy  int32  `json:"fuel_policy"`
	FuelSetBy   int64  `json:"fuel_set_by"`
	SpeedPolicy int32  `json:"speed_policy"`
	SpeedSetBy  int64  `json:"speed_set_by"`
	ParentID    *int64 `json:"parent_id"`
}

func (q *Queries) GetOrganisationWithChild(ctx context.Context, orgID int64) ([]GetOrganisationWithChildRow, error) {
	rows, err := q.db.Query(ctx, getOrganisationWithChild, orgID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetOrganisationWithChildRow
	for rows.Next() {
		var i GetOrganisationWithChildRow
		if err := rows.Scan(
			&i.OrgID,
			&i.Name,
			&i.Account,
			&i.Website,
			&i.FuelPolicy,
			&i.FuelSetBy,
			&i.SpeedPolicy,
			&i.SpeedSetBy,
			&i.ParentID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateFuelPolicy = `-- name: UpdateFuelPolicy :execrows
with recursive query_test
as (
	select org_id, "name", account, website, fuel_policy, fuel_set_by, speed_policy, speed_set_by, parent_id
	from organisations o
	where org_id = $2
	union all 	
	select o.org_id, o."name", o.account, o.website, o.fuel_policy, o.fuel_set_by, o.speed_policy, o.speed_set_by, o.parent_id 
	from organisations o 
	join query_test q on o.parent_id = q.org_id)
update organisations 
set fuel_policy = $1,
fuel_set_by = $2
where org_id in (select org_id from query_test)
`

type UpdateFuelPolicyParams struct {
	FuelPolicy int32 `json:"fuel_policy"`
	OrgID      int64 `json:"org_id"`
}

func (q *Queries) UpdateFuelPolicy(ctx context.Context, arg UpdateFuelPolicyParams) (int64, error) {
	result, err := q.db.Exec(ctx, updateFuelPolicy, arg.FuelPolicy, arg.OrgID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const updateOrganisation = `-- name: UpdateOrganisation :one
UPDATE organisations
SET account = $1,
website = $2,
fuel_policy = $3,
speed_policy = $4
WHERE org_id = $5
RETURNING org_id, name, account, website, fuel_policy, fuel_set_by, speed_policy, speed_set_by, parent_id
`

type UpdateOrganisationParams struct {
	Account     string `json:"account"`
	Website     string `json:"website"`
	FuelPolicy  int32  `json:"fuel_policy"`
	SpeedPolicy int32  `json:"speed_policy"`
	OrgID       int64  `json:"org_id"`
}

func (q *Queries) UpdateOrganisation(ctx context.Context, arg UpdateOrganisationParams) (Organisation, error) {
	row := q.db.QueryRow(ctx, updateOrganisation,
		arg.Account,
		arg.Website,
		arg.FuelPolicy,
		arg.SpeedPolicy,
		arg.OrgID,
	)
	var i Organisation
	err := row.Scan(
		&i.OrgID,
		&i.Name,
		&i.Account,
		&i.Website,
		&i.FuelPolicy,
		&i.FuelSetBy,
		&i.SpeedPolicy,
		&i.SpeedSetBy,
		&i.ParentID,
	)
	return i, err
}
