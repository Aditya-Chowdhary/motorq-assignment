// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: organisations.sql

package database

import (
	"context"
)

const createOrganisation = `-- name: CreateOrganisation :one
INSERT INTO organisations (name, account, website, fuel_policy, speed_policy, parent_id)
Values ($1, $2, $3, $4, $5, $6)
RETURNING org_id, name, account, website, fuel_policy, fuel_set_by, speed_policy, speed_set_by, parent_id
`

type CreateOrganisationParams struct {
	Name        string `json:"name"`
	Account     string `json:"account"`
	Website     string `json:"website"`
	FuelPolicy  int32  `json:"fuel_policy"`
	SpeedPolicy int32  `json:"speed_policy"`
	ParentID    *int64 `json:"parent_id"`
}

func (q *Queries) CreateOrganisation(ctx context.Context, arg CreateOrganisationParams) (Organisation, error) {
	row := q.db.QueryRow(ctx, createOrganisation,
		arg.Name,
		arg.Account,
		arg.Website,
		arg.FuelPolicy,
		arg.SpeedPolicy,
		arg.ParentID,
	)
	var i Organisation
	err := row.Scan(
		&i.OrgID,
		&i.Name,
		&i.Account,
		&i.Website,
		&i.FuelPolicy,
		&i.FuelSetBy,
		&i.SpeedPolicy,
		&i.SpeedSetBy,
		&i.ParentID,
	)
	return i, err
}

const getAllOrganisations = `-- name: GetAllOrganisations :many
SELECT org_id, name, account, website, fuel_policy, fuel_set_by, speed_policy, speed_set_by, parent_id
FROM organisations
`

func (q *Queries) GetAllOrganisations(ctx context.Context) ([]Organisation, error) {
	rows, err := q.db.Query(ctx, getAllOrganisations)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Organisation
	for rows.Next() {
		var i Organisation
		if err := rows.Scan(
			&i.OrgID,
			&i.Name,
			&i.Account,
			&i.Website,
			&i.FuelPolicy,
			&i.FuelSetBy,
			&i.SpeedPolicy,
			&i.SpeedSetBy,
			&i.ParentID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateOrganisation = `-- name: UpdateOrganisation :one
UPDATE organisations
SET account = $1,
website = $2,
fuel_policy = $3,
speed_policy = $4
WHERE org_id = $5
RETURNING org_id, name, account, website, fuel_policy, fuel_set_by, speed_policy, speed_set_by, parent_id
`

type UpdateOrganisationParams struct {
	Account     string `json:"account"`
	Website     string `json:"website"`
	FuelPolicy  int32  `json:"fuel_policy"`
	SpeedPolicy int32  `json:"speed_policy"`
	OrgID       int64  `json:"org_id"`
}

func (q *Queries) UpdateOrganisation(ctx context.Context, arg UpdateOrganisationParams) (Organisation, error) {
	row := q.db.QueryRow(ctx, updateOrganisation,
		arg.Account,
		arg.Website,
		arg.FuelPolicy,
		arg.SpeedPolicy,
		arg.OrgID,
	)
	var i Organisation
	err := row.Scan(
		&i.OrgID,
		&i.Name,
		&i.Account,
		&i.Website,
		&i.FuelPolicy,
		&i.FuelSetBy,
		&i.SpeedPolicy,
		&i.SpeedSetBy,
		&i.ParentID,
	)
	return i, err
}
