// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: vehicles.sql

package database

import (
	"context"
)

const createVehicle = `-- name: CreateVehicle :one
insert into vehicles (vin, org_id, manufacturer, make, model, year)
values ($1, $2, $3, $4, $5, $6)
RETURNING vehicle_id, vin, org_id, manufacturer, make, model, year
`

type CreateVehicleParams struct {
	Vin          string `json:"vin"`
	OrgID        int64  `json:"org_id"`
	Manufacturer string `json:"manufacturer"`
	Make         string `json:"make"`
	Model        string `json:"model"`
	Year         int32  `json:"year"`
}

func (q *Queries) CreateVehicle(ctx context.Context, arg CreateVehicleParams) (Vehicle, error) {
	row := q.db.QueryRow(ctx, createVehicle,
		arg.Vin,
		arg.OrgID,
		arg.Manufacturer,
		arg.Make,
		arg.Model,
		arg.Year,
	)
	var i Vehicle
	err := row.Scan(
		&i.VehicleID,
		&i.Vin,
		&i.OrgID,
		&i.Manufacturer,
		&i.Make,
		&i.Model,
		&i.Year,
	)
	return i, err
}

const getVehicle = `-- name: GetVehicle :one
SELECT vehicle_id, vin, org_id, manufacturer, make, model, year
FROM vehicles
WHERE vin = $1
`

func (q *Queries) GetVehicle(ctx context.Context, vin string) (Vehicle, error) {
	row := q.db.QueryRow(ctx, getVehicle, vin)
	var i Vehicle
	err := row.Scan(
		&i.VehicleID,
		&i.Vin,
		&i.OrgID,
		&i.Manufacturer,
		&i.Make,
		&i.Model,
		&i.Year,
	)
	return i, err
}
